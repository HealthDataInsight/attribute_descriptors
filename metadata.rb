require 'active_model'

#
# This module let's you describe data in a YAML file and get a
# hash (aka dictionary) structure from it that can be used to automate a lot of
# things like form generation, data validators, etc.
#
# This is particularly useful when you want to generate a model and other
# components but without a database.
#
# Example
# -------
# Forename:
# NHS.net email address:
#   programmatic_name: nhsmail
#   validate: .*@\.nhs\.net
#
#    .. results in the metadata structure below..
#
# {
#   forename=> {
#      "description" => "Forename"
#      "require" => true,
#      "validate" => /\A.*\z/,
#      "min" => 0,
#      "max" => Infinity,
#      "values" => nil,
#      "max_num_values" => Infinity,
#      "min_num_values" => 0
#      "programmatic_name" => "forename"
#   },
#   nhsmail => {
#      "description" => "NHS.net email address"
#      "validate" => /\A.*@\\.nhs\\.net\z/,
#      "require" => true,
#      "min" => 0,
#      "max" => Infinity,
#      "values" => nil,
#      "max_num_values" => Infinity,
#      "min_num_values" => 0
#      "programmatic_name" => "nhsmail"
#   },
# }
#
module Metadata

  INFINITY = Float::INFINITY

  def self.load_file(filepath, defaults = nil)
    f = open(filepath, 'r')
    file_content = f.read
    f.close
    load_yaml(file_content, defaults)
  end

  # Reads raw YAML metadata specifying data name, length, max values, etc.
  def self.load_yaml(yaml, defaults = nil)
    metadata = YAML.load(yaml)

    metadata.each do |attr_name, meta|
      params = defaults || {
        'require'        => true,
        'validate'       => /.*/,
        'max_length'     => nil,
        'min_length'     => 0,
        'min_value'      => 0,
        'max_value'      => nil,
        'values'         => nil,
        'max_num_values' => nil,
        'min_num_values' => 0
      }

      # Expand compact syntax (ie. a=10 b=20)
      #
      # field1: require=true example=jojo
      #   validate: .*
      #
      #     ..gives the meta..
      # "field1" => "require=true example=jojo validate=.*"
      #
      if meta.is_a? String # This is always true if compact syntax is used
        asssignments = meta.split(' ')
        metadata[attr_name] = {}
        asssignments.each do |assignment|
          k, v = assignment.split('=')
          metadata[attr_name][k] = v
        end
      end

      # Add any missing paramaters from defaults
      params.each do |k, _v|
        metadata[attr_name][k] = params[k] unless metadata[attr_name].include? k
      end

      # Generate a programmatic_name based on the attr_name if none explicitly
      # given
      #
      # IMPORTANT: Automatically generated programmatic names might be too long.
      #            You are advised to explicitly add the programmatic_name for
      #            each field in your metadata file.
      if metadata[attr_name]['programmatic_name'].nil?
        underscored = attr_name.tr(' !"#$%&\'()*+,-./:;<=>?@[\\]^_`{ |}~', '_')
        singly_underscored = underscored.split('_').select { |v| !v.empty? }\
                                        .join('_')
        metadata[attr_name]['programmatic_name'] = singly_underscored
      end

      # Finally update/evaluate values to the ones given by configuration file
      metadata[attr_name].each do |name, value|
        case name
        when 'validate'
          if value.is_a?(String)
            value = value[1...-1] if value.start_with?('/') && \
                                     value.end_with?('/')

            # Enforce the \A..\z regex placeholders for security reasons
            # (http://guides.rubyonrails.org/security.html#regular-expressions)
            value = value[1..-1]  if value.start_with?('^')
            value = value[0...-1] if value.start_with?('$')
            value = '\A' + value unless value.start_with?('\A')
            value += '\z' unless value.end_with?('\z')
          end
          metadata[attr_name][name] = Regexp.new(value)
        when 'valid_num_values'
          metadata[attr_name][name] = value.to_s
        else
          metadata[attr_name][name] = value
        end
      end
    end

    # Swap attribute description with programmatic_name as key
    # since inside the code the programmatic_name makes it easier
    # to access speicfic attributes in the metadata.
    metadata_new = {}
    metadata.each do |attr_name, name|
      programmatic_name = metadata[attr_name]['programmatic_name']
      metadata_new[programmatic_name] = metadata[attr_name]
      metadata_new[programmatic_name]['description'] = attr_name
    end
    metadata = metadata_new

    metadata
  end

  #
  # This class, once inherited let's you generate attributes and validations
  # based on metadata in a YAML file.
  #
  # IMPORTANT: This has only be tested being used on models that don't rely on
  #            a database.
  #
  # Usage:
  #   1. Have your model inherit from AutogeneratedModel
  #   2. Use generated_from in your model to load metadata from a specific file
  #
  class AutogeneratedModel
    include ActiveModel::Validations

    #
    # (API) Access metadata
    #
    def metadata
      @@metadata || nil
    end
    def self.metadata
      @@metadata || nil
    end

    #
    # (API) Load metadata and perform actions
    #
    # This runs on class level (aka before instance initialization)
    #
    def self.generated_from(filepath)
      @@metadata = Metadata.load_file(filepath)

      # Generate attribute accessors based on metadata
      @@metadata.keys.each do |attr_name|
        class_eval { attr_accessor attr_name }
      end

      # Generate validations based on metadata
      generate_validations
    end

    def initialize(attrs = {})
      fail 'You need to call \'generated_from\' in your class '\
           'to specify the metadata path' if metadata.nil?

      # Set attributes
      attrs.each do |attr_name, value|
        send("#{attr_name}=", value) if self.class.attributes.include? attr_name
      end
    end

    # Gives back the attributes of the model
    def self.attributes
      @@metadata.keys
    end

    # Gives back the required attributes of the model
    def self.required_attributes
      @@metadata.select { |_k, meta| meta['require'] }.keys
    end

    private

    def self.generate_validations
      @@metadata.each do |attr_name, meta|
        length = {}
        validation_params = {}

        # Length for single item
        length[:minimum] = meta['min_length'] if meta['min_length'] && \
                                                 meta['min_length'] > 0
        length[:maximum] = meta['max_length'] if meta['max_length'] && \
                                                 meta['max_length'] != INFINITY

        # Length for collection
        if meta['valid_num_values']
          range = meta['valid_num_values']
          case range
          # NOT SUPPORTED YET
          # when /\A\d*\-\d*\z/ # ie. 2-5
          #   min, max = range.split('-')
          #   length[:minimum] = min
          #   length[:maximum] = max
          # NOT SUPPORTED YET
          # when /\A\d*\+\z/ # ie. 5+
          #   length[:minimum] = range.to_i
          when /\A\d*\z/ # ie. 5
            length[:minimum] = range.to_i
            length[:maximum] = range.to_i

            # Workaround for TODO *
            if length[:minimum] == 1
              validation_params[:inclusion] = meta['valid_values'] if meta['valid_values']
            end
          else
            print("ERROR: Can't recognize given range '#{range}'")
          end
        end

        validation_params[:presence]    = true if meta['require']
        validation_params[:allow_blank] = !meta['require']
        validation_params[:format]      = meta['validate']
        validation_params[:length]      = length if !length.empty?
        # TODO (*): Make inclusion work for checking arrays. Rails only allows
        #       checking for membership of a single element.
        # Workaround line : ~235

        validates attr_name, validation_params
      end
    end

    # Validate colletion
    def self.validate_collection


    end

  end

end
